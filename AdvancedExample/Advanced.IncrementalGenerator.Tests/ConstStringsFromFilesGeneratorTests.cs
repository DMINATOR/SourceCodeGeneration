using StaticFiles.IncrementalGenerator.Tests;
using System;
using System.Collections.Generic;
using System.Text;
using Xunit;

namespace Advanced.IncrementalGenerator.Tests
{
    public class ConstStringsFromFilesGeneratorTests
    {
        [Fact]
        public void Generate_2_Files_Success()
        {
            // Input to use as a source for generation
            var inputSourceCode =
@"
using Advanced.IncrementalGenerator;

namespace Advanced.IncrementalGenerator.Tests
{
    // Partial class for generating const strings
    public static partial class ConstStringsFromIncrementalGenerator
    {

    }
}
";
            // Actual result generated by the Source Generator based on input
            var expectedGeneratedCode =
@"// <auto-generated/>
using System;

namespace Advanced.IncrementalGenerator.Tests
{
    public static partial class Program
    {
        static partial void HelloFromIncrementalGenerator(string name) =>
            Console.WriteLine($""Generator says: Hi from '{name}'"");
    }
}
";

            var result = CSharpIncrementalGeneratorVerifier<ConstStringsFromFilesGenerator>.Verify(inputSourceCode, new ConstStringsFromFilesGenerator());

            Assert.True(result.Diagnostics.IsEmpty);
            Assert.Single(result.Results);

            var resultRun = result.Results[0];
            Assert.Single(resultRun.GeneratedSources);

            Assert.Equal(expectedGeneratedCode, resultRun.GeneratedSources[0].SourceText.ToString());
            Assert.Equal("ConstStringsFromIncrementalGenerator.g.cs", resultRun.GeneratedSources[0].HintName);
        }
    }
}
