using Microsoft.CodeAnalysis.Text;
using StaticFiles.IncrementalGenerator.Tests;
using System.Text;
using Xunit;

namespace Advanced.IncrementalGenerator.Tests
{
    public class HelloSourceIncrementalGeneratorTests
    {
        [Fact]
        public void Generate_Success()
        {
            // Input to use as a source for generation
            var inputSourceCode =
@"
using Advanced.IncrementalGenerator;

namespace Advanced.IncrementalGenerator.Tests
{
    partial class Program
    {
        static void Main(string[] args)
        {
            HelloFromIncrementalGenerator(""SourceGenerator !"");
        }

        // This will be generated:
        [GenerateHelloSourceIncremental]
        static partial void HelloFromIncrementalGenerator(string name);
    }
}
";
            // Actual result generated by the Source Generator based on input
            var expectedGeneratedCode =
@"// <auto-generated/>
using System;

namespace Advanced.IncrementalGenerator.Tests
{
    public static partial class Program
    {
        static partial void HelloFromIncrementalGenerator(string name) =>
            Console.WriteLine($""Generator says: Hi from '{name}'"");
    }
}
";

            var result = CSharpIncrementalGeneratorVerifier<HelloSourceIncrementalGenerator>.Verify(inputSourceCode, new HelloSourceIncrementalGenerator());

            Assert.True(result.Diagnostics.IsEmpty);
            Assert.Single(result.Results);

            var resultRun = result.Results[0];
            Assert.Single(resultRun.GeneratedSources);

            Assert.True(SourceText.From(expectedGeneratedCode, Encoding.UTF8, SourceHashAlgorithm.Sha1).ContentEquals(resultRun.GeneratedSources[0].SourceText));
            Assert.Equal("Program.g.cs", resultRun.GeneratedSources[0].HintName);
        }
    }
}
