using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Text;
using System.IO;
using static System.Net.Mime.MediaTypeNames;
using System.Threading;

namespace Advanced.IncrementalGenerator
{
    /// <summary>
    /// Generates const strings for file locations from included files.
    /// 
    /// Make sure files are set to be "C# analyzer additional file" in their Properties for this to work.
    /// 
    /// Example for including additional files: https://devblogs.microsoft.com/dotnet/new-c-source-generator-samples/
    /// For incremental generators: https://stackoverflow.com/questions/72095200/c-sharp-incremental-generator-how-i-can-read-additional-files-additionaltexts
    /// </summary>
    [Generator]
    public class ConstStringsFromFilesGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            // Locate all additional files that match
            var textFiles = context.AdditionalTextsProvider.Where(static file => IsAdditionalFileTargetForGeneration(file));

            // Combine the selected enums with the `Compilation`
            IncrementalValueProvider<(Compilation, ImmutableArray<AdditionalText>)> compilationAndFiles  = context.CompilationProvider.Combine(textFiles.Collect());

            // Get file name and content
            //var namesAndContents = textFiles.Select((text, cancellationToken) => (name: Path.GetFileNameWithoutExtension(text.Path), content: text.GetText(cancellationToken)!.ToString()));

            // Generate consts from the files
            // context.RegisterSourceOutput(namesAndContents, (spc, nameAndContent) => Execute(nameAndContent, spc));
            context.RegisterSourceOutput(compilationAndFiles, static (spc, source) => Execute(source.Item1, source.Item2, spc));
        }

        static bool IsAdditionalFileTargetForGeneration(AdditionalText file)
        {
            return file.Path.EndsWith(".txt");
        }

        //private static void Execute(List<(string name, string content)> fileNamesAndContent, SourceProductionContext spc)
        //{
        //    var generatedSource = GetGeneratedSource(nameAndContent);
        //    spc.AddSource($"TxtFile.{nameAndContent.name}.g.cs", generatedSource);
        //}

        private static void Execute(Compilation compilation, ImmutableArray<AdditionalText> additionalTexts, SourceProductionContext context)
        {
            var generatedSource = GetGeneratedSource(additionalTexts, context.CancellationToken);
            context.AddSource($"ConstStringsFromIncrementalGenerator.g.cs", generatedSource);
        }


        //private static void Execute((string name, string content) nameAndContent, SourceProductionContext spc)
        //{
        //    var generatedSource = GetGeneratedSource(nameAndContent);
        //    spc.AddSource($"TxtFile.{nameAndContent.name}.g.cs", generatedSource);
        //}

        public static string GetGeneratedSource(ImmutableArray<AdditionalText> additionalTexts, CancellationToken cancellationToken)
        {
            return $@"// <auto-generated/>
public static partial class ConstStringsFromIncrementalGenerator
{{
{GetGeneratedSourceForfiles(additionalTexts, cancellationToken)}
}}";
        }

        private static string GetGeneratedSourceForfiles(ImmutableArray<AdditionalText> additionalTexts, CancellationToken cancellationToken)
        {
            var result = new StringBuilder();

            foreach(var additionalText in additionalTexts)
            {
                result.AppendLine($"\t\tpublic const string {Path.GetFileNameWithoutExtension(additionalText.Path)} = \"{additionalText.GetText(cancellationToken)}\";");
                result.AppendLine();
            }

            return result.ToString();
        }



        //        public static string GetGeneratedSource((string name, string content) nameAndContent)
        //        {
        //            return 
        //$@"// <auto-generated/>
        //public static partial class ConstStringsFromIncrementalGenerator
        //{{
        //    public const string {nameAndContent.name} = ""{nameAndContent.content}"";
        //}}
        //";
        //        }

        //static MethodDeclarationSyntax? GetSemanticTargetForGeneration(GeneratorSyntaxContext context)
        //{
        //    // we know the node is a MethodDeclarationSyntax thanks to IsSyntaxTargetForGeneration
        //    var methodDeclarationSyntax = (MethodDeclarationSyntax)context.Node;

        //    // loop through all the attributes on the method
        //    foreach (AttributeListSyntax attributeListSyntax in methodDeclarationSyntax.AttributeLists)
        //    {
        //        foreach (AttributeSyntax attributeSyntax in attributeListSyntax.Attributes)
        //        {
        //            // Match by attribute name exactly
        //            if (attributeSyntax.ToString() == "GenerateHelloSourceIncremental")
        //            {
        //                return methodDeclarationSyntax;
        //            }
        //        }
        //    }

        //    // we didn't find the attribute we were looking for
        //    return null;
        //}

        //private static void Execute2(Compilation compilation, ImmutableArray<MethodDeclarationSyntax> methods, SourceProductionContext context)
        //{
        //    if (methods.IsDefaultOrEmpty)
        //    {
        //        // nothing to do yet
        //        return;
        //    }

        //    foreach (var methodDeclarationSyntax in methods)
        //    {
        //        // Get properties of method for generation
        //        var methodName = methodDeclarationSyntax.Identifier.Text;
        //        var className = GetElement<ClassDeclarationSyntax>(methodDeclarationSyntax).Identifier.Text;
        //        var namespaceName = GetElement<NamespaceDeclarationSyntax>(methodDeclarationSyntax).Name.ToString();

        //        var generatedSourceCode = GetGeneratedSource(namespaceName, className, methodName);

        //        //add file to generation
        //        context.AddSource($"{className}.g.cs", generatedSourceCode);
        //    }
        //}

        //// Retrieve element from the syntax tree
        //public static T GetElement<T>(SyntaxNode syntaxNode) where T : SyntaxNode
        //{
        //    while (syntaxNode != null)
        //    {
        //        if (syntaxNode is T)
        //        {
        //            return syntaxNode as T;
        //        }
        //        else
        //        {
        //            syntaxNode = syntaxNode.Parent;
        //        }
        //    }

        //    throw new Exception($"Namespace cannot be located for '{syntaxNode.GetLocation()}'");
        //}


    }
}
