using Microsoft.CodeAnalysis.Text;
using System.Text;
using System.Threading.Tasks;
using Xunit;
using VerifyTestFiles = Advanced.SourceGenerator.Tests.CSharpSourceGeneratorVerifier<Advanced.SourceGenerator.HelloSourceGenerator>;

namespace Advanced.SourceGenerator.Tests
{
    public class HelloSourceGeneratorTests
    {
        [Fact]
        public async Task AddSimpleFile2()
        {
            // Input to use as a source for generation
            var inputSourceCode =
@"
using Advanced.SourceGenerator;

namespace Advanced.SourceGenerator.Tests
{
    partial class Program
    {
        static void Main(string[] args)
        {
            HelloFromSourceGenerator(""SourceGenerator !"");
        }

        // This will be generated:
        [GenerateHelloSource]
        static partial void HelloFromSourceGenerator(string name);
    }
}
";
            // Actual result generated by the Source Generator based on input
            var expectedGeneratedCode =
@"// <auto-generated/>
using System;

namespace Advanced.SourceGenerator.Tests
{
    public static partial class Program
    {
        static partial void HelloFromSourceGenerator(string name) =>
            Console.WriteLine($""Generator says: Hi from '{name}'"");
    }
}
";
            // Execute test case
            await new VerifyTestFiles.Test
            {
                TestState =
                {
                    Sources = { inputSourceCode },
                    GeneratedSources =
                    {
                        (typeof(Advanced.SourceGenerator.HelloSourceGenerator), "Program.g.cs", SourceText.From(expectedGeneratedCode, Encoding.UTF8, SourceHashAlgorithm.Sha1)),
                    },
                },
            }.RunAsync();
        }
    }
}
