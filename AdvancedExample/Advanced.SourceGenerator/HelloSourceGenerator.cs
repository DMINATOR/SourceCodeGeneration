using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Text;

namespace Advanced.SourceGenerator
{
    /// <summary>
    /// Attribute to mark method for source code generation
    /// </summary>
    public class GenerateHelloSourceAttribute : Attribute
    {

    }

    /// <summary>
    /// 
    /// This example is based on - https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview
    /// 
    /// A source generator needs to both implement the Microsoft.CodeAnalysis.ISourceGenerator interface, 
    /// and have the Microsoft.CodeAnalysis.GeneratorAttribute. Not all source generators require initialization, 
    /// and that is the case with this example implementation—where ISourceGenerator.Initialize is empty.
    /// 
    /// You also need to add EnforceExtendedAnalyzerRules=true property, see https://github.com/dotnet/roslyn-analyzers/blob/main/src/Microsoft.CodeAnalysis.Analyzers/Microsoft.CodeAnalysis.Analyzers.md#rs1036-specify-analyzer-banned-api-enforcement-setting
    /// </summary>
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // Find the main method
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

            // Build up the source code
            string source = GetSource(mainMethod.ContainingNamespace.ToDisplayString(), mainMethod.ContainingType.Name);
            var typeName = mainMethod.ContainingType.Name;

            // Add the source code to the compilation
            context.AddSource($"{typeName}.g.cs", source);
        }

        public static string GetSource(string namespaceName, string className)
        {
            return $@"// <auto-generated/>
using System;

namespace {namespaceName}
{{
    public static partial class {className}
    {{
        static partial void HelloFromSourceGenerator(string name) =>
            Console.WriteLine($""Generator says: Hi from '{{name}}'"");
    }}
}}
";
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }
    }
}
