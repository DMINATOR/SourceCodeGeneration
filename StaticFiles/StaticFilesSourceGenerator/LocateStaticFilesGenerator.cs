using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace StaticFilesSourceGenerator
{
    /// <summary>
    /// 
    /// </summary>
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // Find the main method
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);
            var foundFiles = GetFilesByExtension(".txt", context);

            var stringBuilder = new StringBuilder();

            // HEADER
            stringBuilder.AppendLine("//<auto-generated/>");
            stringBuilder.AppendLine($"// Found {foundFiles.Count} files.");
            stringBuilder.AppendLine($"// At {DateTime.Now}");
            stringBuilder.AppendLine($@"
using System;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class ConstStringsFromSourceGenerator
    {{");

            // BODY
            foreach(var file in foundFiles)
            {
                stringBuilder.AppendLine($"// File {file.Path}");
                stringBuilder.AppendLine($"public const string File_{Path.GetFileName(file.Path)} = \"{file.Path}\"");
            }

            // FOOTER
            stringBuilder.AppendLine($@"
    }}
}}");

            // Add the source code to the compilation
            context.AddSource($"ConstStringsFromSourceGenerator.g.cs", stringBuilder.ToString());
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }



        static List<AdditionalText> GetFilesByExtension(string extension, GeneratorExecutionContext context)
        {
            var foundFiles = new List<AdditionalText>();

            foreach (AdditionalText file in context.AdditionalFiles)
            {
                if (Path.GetExtension(file.Path).Equals(extension, StringComparison.OrdinalIgnoreCase))
                {
                    foundFiles.Add(file);
                }
            }

            return foundFiles;
        }
    }
}
